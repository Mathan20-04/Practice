  | 1 | What are the possible ways to create objects in JavaScript | | 2 | What is prototype chain | | 3 | What is the difference between Call, Apply and Bind | | 4 | What is JSON and its common operations | | 5 | What is the purpose of the array slice method | | 6 | What is the purpose of the array splice method | | 7 | What is the difference between slice and splice | | 8 | How do you compare Object and Map | | 9 | What is the difference between == and === operators | | 10 | What are lambda or arrow functions | | 11 | What is a first class function | | 12 | What is a first order function | | 13 | What is a higher order function | | 14 | What is a unary function | | 15 | What is the currying function | | 16 | What is a pure function | | 17 | What is the purpose of the let keyword | | 18 | What is the difference between let and var | | 19 | What is the reason to choose the name let as a keyword | | 20 | How do you redeclare variables in switch block without an error | | 21 | What is the Temporal Dead Zone | | 22 | What is IIFE(Immediately Invoked Function Expression) | | 23 | How do you decode or encode a URL in JavaScript? | | 24 | What is memoization | | 25 | What is Hoisting | | 26 | What are classes in ES6 | | 27 | What are closures | | 28 | What are modules | | 29 | Why do you need modules | | 30 | What is scope in javascript | | 31 | What is a service worker | | 32 | How do you manipulate DOM using a service worker | | 33 | How do you reuse information across service worker restarts | | 34 | What is IndexedDB | | 35 | What is web storage | | 36 | What is a post message | | 37 | What is a cookie | | 38 | Why do you need a Cookie | | 39 | What are the options in a cookie | | 40 | How do you delete a cookie | | 41 | What are the differences between cookie, local storage and session storage | | 42 | What is the main difference between localStorage and sessionStorage | | 43 | How do you access web storage | | 44 | What are the methods available on session storage | | 45 | What is a storage event and its event handler | | 46 | Why do you need web storage | | 47 | How do you check web storage browser support | | 48 | How do you check web workers browser support | | 49 | Give an example of a web worker | | 50 | What are the restrictions of web workers on DOM | | 51 | What is a promise | | 52 | Why do you need a promise | | 53 | What are the three states of promise | | 54 | What is a callback function | | 55 | Why do we need callbacks | | 56 | What is a callback hell | | 57 | What are server-sent events | | 58 | How do you receive server-sent event notifications | | 59 | How do you check browser support for server-sent events | | 60 | What are the events available for server sent events | | 61 | What are the main rules of promise | | 62 | What is callback in callback | | 63 | What is promise chaining | | 64 | What is promise.all | | 65 | What is the purpose of the race method in promise | | 66 | What is a strict mode in javascript | | 67 | Why do you need strict mode | | 68 | How do you declare strict mode | | 69 | What is the purpose of double exclamation | | 70 | What is the purpose of the delete operator | | 71 | What is typeof operator | | 72 | What is undefined property | | 73 | What is null value | | 74 | What is the difference between null and undefined | | 75 | What is eval | | 76 | What is the difference between window and document | | 77 | How do you access history in javascript | | 78 | How do you detect caps lock key turned on or not | | 79 | What is isNaN | | 80 | What are the differences between undeclared and undefined variables | | 81 | What are global variables | | 82 | What are the problems with global variables | | 83 | What is NaN property | | 84 | What is the purpose of isFinite function | | 85 | What is an event flow | | 86 | What is event bubbling | | 87 | What is event capturing | | 88 | How do you submit a form using JavaScript | | 89 | How do you find operating system details | | 90 | What is the difference between document load and DOMContentLoaded events | | 91 | What is the difference between native, host and user objects | | 92 | What are the tools or techniques used for debugging JavaScript code | | 93 | What are the pros and cons of promises over callbacks | | 94 | What is the difference between an attribute and a property | | 95 | What is same-origin policy | | 96 | What is the purpose of void 0 | | 97 | Is JavaScript a compiled or interpreted language | | 98 | Is JavaScript a case-sensitive language | | 99 | Is there any relation between Java and JavaScript | | 100 | What are events | | 101 | Who created javascript | | 102 | What is the use of preventDefault method | | 103 | What is the use of stopPropagation method | | 104 | What are the steps involved in return false usage | | 105 | What is BOM | | 106 | What is the use of setTimeout | | 107 | What is the use of setInterval | | 108 | Why is JavaScript treated as Single threaded | | 109 | What is an event delegation | | 110 | What is ECMAScript | | 111 | What is JSON | | 112 | What are the syntax rules of JSON | | 113 | What is the purpose JSON stringify | | 114 | How do you parse JSON string | | 115 | Why do you need JSON | | 116 | What are PWAs | | 117 | What is the purpose of clearTimeout method | | 118 | What is the purpose of clearInterval method | | 119 | How do you redirect new page in javascript | | 120 | How do you check whether a string contains a substring | | 121 | How do you validate an email in javascript | | 122 | How do you get the current url with javascript | | 123 | What are the various url properties of location object | | 124 | How do get query string values in javascript | | 125 | How do you check if a key exists in an object | | 126 | How do you loop through or enumerate javascript object | | 127 | How do you test for an empty object | | 128 | What is an arguments object | | 129 | How do you make first letter of the string in an uppercase | | 130 | What are the pros and cons of for loop | | 131 | How do you display the current date in javascript | | 132 | How do you compare two date objects | | 133 | How do you check if a string starts with another string | | 134 | How do you trim a string in javascript | | 135 | How do you add a key value pair in javascript | | 136 | Is the '!--' notation represents a special operator | | 137 | How do you assign default values to variables | | 138 | How do you define multiline strings | | 139 | What is an app shell model | | 140 | Can we define properties for functions | | 141 | What is the way to find the number of parameters expected by a function | | 142 | What is a polyfill | | 143 | What are break and continue statements | | 144 | What are js labels | | 145 | What are the benefits of keeping declarations at the top | | 146 | What are the benefits of initializing variables | | 147 | What are the recommendations to create new object | | 148 | How do you define JSON arrays | | 149 | How do you generate random integers | | 150 | Can you write a random integers function to print integers with in a range | | 151 | What is tree shaking | | 152 | What is the need of tree shaking | | 153 | Is it recommended to use eval | | 154 | What is a Regular Expression | | 155 | What are the string methods available in Regular expression | | 156 | What are modifiers in regular expression | | 157 | What are regular expression patterns | | 158 | What is a RegExp object | | 159 | How do you search a string for a pattern | | 160 | What is the purpose of exec method | | 161 | How do you change the style of a HTML element | | 162 | What would be the result of 1+2+'3' | | 163 | What is a debugger statement | | 164 | What is the purpose of breakpoints in debugging | | 165 | Can I use reserved words as identifiers | | 166 | How do you detect a mobile browser | | 167 | How do you detect a mobile browser without regexp | | 168 | How do you get the image width and height using JS | | 169 | How do you make synchronous HTTP request | | 170 | How do you make asynchronous HTTP request | | 171 | How do you convert date to another timezone in javascript | | 172 | What are the properties used to get size of window | | 173 | What is a conditional operator in javascript | | 174 | Can you apply chaining on conditional operator | | 175 | What are the ways to execute javascript after page load | | 176 | What is the difference between proto and prototype | | 177 | Give an example where do you really need semicolon | | 178 | What is a freeze method | | 179 | What is the purpose of freeze method | | 180 | Why do I need to use freeze method | | 181 | How do you detect a browser language preference | | 182 | How to convert string to title case with javascript | | 183 | How do you detect javascript disabled in the page | | 184 | What are various operators supported by javascript | | 185 | What is a rest parameter | | 186 | What happens if you do not use rest parameter as a last argument | | 187 | What are the bitwise operators available in javascript | | 188 | What is a spread operator | | 189 | How do you determine whether object is frozen or not | | 190 | How do you determine two values same or not using object | | 191 | What is the purpose of using object is method | | 192 | How do you copy properties from one object to other | | 193 | What are the applications of assign method | | 194 | What is a proxy object | | 195 | What is the purpose of seal method | | 196 | What are the applications of seal method | | 197 | What are the differences between freeze and seal methods | | 198 | How do you determine if an object is sealed or not | | 199 | How do you get enumerable key and value pairs | | 200 | What is the main difference between Object.values and Object.entries method | | 201 | How can you get the list of keys of any object | | 202 | How do you create an object with prototype | | 203 | What is a WeakSet | | 204 | What are the differences between WeakSet and Set | | 205 | List down the collection of methods available on WeakSet | | 206 | What is a WeakMap | | 207 | What are the differences between WeakMap and Map | | 208 | List down the collection of methods available on WeakMap | | 209 | What is the purpose of uneval | | 210 | How do you encode an URL | | 211 | How do you decode an URL | | 212 | How do you print the contents of web page | | 213 | What is the difference between uneval and eval | | 214 | What is an anonymous function | | 215 | What is the precedence order between local and global variables | | 216 | What are javascript accessors | | 217 | How do you define property on Object constructor | | 218 | What is the difference between get and defineProperty | | 219 | What are the advantages of Getters and Setters | | 220 | Can I add getters and setters using defineProperty method | | 221 | What is the purpose of switch-case | | 222 | What are the conventions to be followed for the usage of switch case | | 223 | What are primitive data types | | 224 | What are the different ways to access object properties | | 225 | What are the function parameter rules | | 226 | What is an error object | | 227 | When you get a syntax error | | 228 | What are the different error names from error object | | 229 | What are the various statements in error handling | | 230 | What are the two types of loops in javascript | | 231 | What is nodejs | | 232 | What is an Intl object | | 233 | How do you perform language specific date and time formatting | | 234 | What is an Iterator | | 235 | How does synchronous iteration works | | 236 | What is an event loop | | 237 | What is call stack | | 238 | What is an event queue | | 239 | What is a decorator | | 240 | What are the properties of Intl object | | 241 | What is an Unary operator | | 242 | How do you sort elements in an array | | 243 | What is the purpose of compareFunction while sorting arrays | | 244 | How do you reversing an array | | 245 | How do you find min and max value in an array | | 246 | How do you find min and max values without Math functions | | 247 | What is an empty statement and purpose of it | | 248 | How do you get metadata of a module | | 249 | What is a comma operator | | 250 | What is the advantage of a comma operator | | 251 | What is typescript | | 252 | What are the differences between javascript and typescript | | 253 | What are the advantages of typescript over javascript | | 254 | What is an object initializer | | 255 | What is a constructor method | | 256 | What happens if you write constructor more than once in a class | | 257 | How do you call the constructor of a parent class | | 258 | How do you get the prototype of an object | | 259 | What happens If I pass string type for getPrototype method | | 260 | How do you set prototype of one object to another | | 261 | How do you check whether an object can be extendable or not | | 262 | How do you prevent an object to extend | | 263 | What are the different ways to make an object non-extensible | | 264 | How do you define multiple properties on an object | | 265 | What is MEAN in javascript | | 266 | What Is Obfuscation in javascript | | 267 | Why do you need Obfuscation | | 268 | What is Minification | | 269 | What are the advantages of minification | | 270 | What are the differences between Obfuscation and Encryption | | 271 | What are the common tools used for minification | | 272 | How do you perform form validation using javascript | | 273 | How do you perform form validation without javascript | | 274 | What are the DOM methods available for constraint validation | | 275 | What are the available constraint validation DOM properties | | 276 | What are the list of validity properties | | 277 | Give an example usage of rangeOverflow property | | 278 | Is enums feature available in javascript | | 279 | What is an enum | | 280 | How do you list all properties of an object | | 281 | How do you get property descriptors of an object | | 282 | What are the attributes provided by a property descriptor | | 283 | How do you extend classes | | 284 | How do I modify the url without reloading the page | | 285 | How do you check whether an array includes a particular value or not | | 286 | How do you compare scalar arrays | | 287 | How to get the value from get parameters | | 288 | How do you print numbers with commas as thousand separators | | 289 | What is the difference between java and javascript | | 290 | Does javascript supports namespace | | 291 | How do you declare namespace | | 292 | How do you invoke javascript code in an iframe from parent page | | 293 | How do get the timezone offset from date | | 294 | How do you load CSS and JS files dynamically | | 295 | What are the different methods to find HTML elements in DOM | | 296 | What is jQuery | | 297 | What is V8 JavaScript engine | | 298 | Why do we call javascript as dynamic language | | 299 | What is a void operator | | 300 | How to set the cursor to wait | | 301 | How do you create an infinite loop | | 302 | Why do you need to avoid with statement | | 303 | What is the output of below for loops | | 304 | List down some of the features of ES6 | | 305 | What is ES6 | | 306 | Can I redeclare let and const variables | | 307 | Is const variable makes the value immutable | | 308 | What are default parameters | | 309 | What are template literals | | 310 | How do you write multi-line strings in template literals | | 311 | What are nesting templates | | 312 | What are tagged templates | | 313 | What are raw strings | | 314 | What is destructuring assignment | | 315 | What are default values in destructuring assignment | | 316 | How do you swap variables in destructuring assignment | | 317 | What are enhanced object literals | | 318 | What are dynamic imports | | 319 | What are the use cases for dynamic imports | | 320 | What are typed arrays | | 321 | What are the advantages of module loaders | | 322 | What is collation | | 323 | What is for...of statement | | 324 | What is the output of below spread operator array | | 325 | Is PostMessage secure | | 326 | What are the problems with postmessage target origin as wildcard | | 327 | How do you avoid receiving postMessages from attackers | | 328 | Can I avoid using postMessages completely | | 329 | Is postMessages synchronous | | 330 | What paradigm is Javascript | | 331 | What is the difference between internal and external javascript | | 332 | Is JavaScript faster than server side script | | 333 | How do you get the status of a checkbox | | 334 | What is the purpose of double tilde operator | | 335 | How do you convert character to ASCII code | | 336 | What is ArrayBuffer | | 337 | What is the output of below string expression | | 338 | What is the purpose of Error object | | 339 | What is the purpose of EvalError object | | 340 | What are the list of cases error thrown from non-strict mode to strict mode | | 341 | Do all objects have prototypes | | 342 | What is the difference between a parameter and an argument | | 343 | What is the purpose of some method in arrays | | 344 | How do you combine two or more arrays | | 345 | What is the difference between Shallow and Deep copy | | 346 | How do you create specific number of copies of a string | | 347 | How do you return all matching strings against a regular expression | | 348 | How do you trim a string at the beginning or ending | | 349 | What is the output of below console statement with unary operator | | 350 | Does javascript uses mixins | | 351 | What is a thunk function | | 352 | What are asynchronous thunks | | 353 | What is the output of below function calls | | 354 | How to remove all line breaks from a string | | 355 | What is the difference between reflow and repaint | | 356 | What happens with negating an array | | 357 | What happens if we add two arrays | | 358 | What is the output of prepend additive operator on falsy values | | 359 | How do you create self string using special characters | | 360 | How do you remove falsy values from an array | | 361 | How do you get unique values of an array | | 362 | What is destructuring aliases | | 363 | How do you map the array values without using map method | | 364 | How do you empty an array | | 365 | How do you rounding numbers to certain decimals | | 366 | What is the easiest way to convert an array to an object | | 367 | How do you create an array with some data | | 368 | What are the placeholders from console object | | 369 | Is it possible to add CSS to console messages | | 370 | What is the purpose of dir method of console object | | 371 | Is it possible to debug HTML elements in console | | 372 | How do you display data in a tabular format using console object | | 373 | How do you verify that an argument is a Number or not | | 374 | How do you create copy to clipboard button | | 375 | What is the shortcut to get timestamp | | 376 | How do you flattening multi dimensional arrays | | 377 | What is the easiest multi condition checking | | 378 | How do you capture browser back button | | 379 | How do you disable right click in the web page | | 380 | What are wrapper objects | | 381 | What is AJAX | | 382 | What are the different ways to deal with Asynchronous Code | | 383 | How to cancel a fetch request | | 384 | What is web speech API | | 385 | What is minimum timeout throttling | | 386 | How do you implement zero timeout in modern browsers | | 387 | What are tasks in event loop | | 388 | What is microtask | | 389 | What are different event loops | | 390 | What is the purpose of queueMicrotask | | 391 | How do you use javascript libraries in typescript file | | 392 | What are the differences between promises and observables | | 393 | What is heap | | 394 | What is an event table | | 395 | What is a microTask queue | | 396 | What is the difference between shim and polyfill | | 397 | How do you detect primitive or non primitive value type | | 398 | What is babel | | 399 | Is Node.js completely single threaded | | 400 | What are the common use cases of observables | | 401 | What is RxJS | | 402 | What is the difference between Function constructor and function declaration | | 403 | What is a Short circuit condition | | 404 | What is the easiest way to resize an array | | 405 | What is an observable | | 406 | What is the difference between function and class declarations | | 407 | What is an async function | | 408 | How do you prevent promises swallowing errors | | 409 | What is deno | | 410 | How do you make an object iterable in javascript | | 411 | What is a Proper Tail Call | | 412 | How do you check an object is a promise or not | | 413 | How to detect if a function is called as constructor | | 414 | What are the differences between arguments object and rest parameter | | 415 | What are the differences between spread operator and rest parameter | | 416 | What are the different kinds of generators | | 417 | What are the built-in iterables | | 418 | What are the differences between for...of and for...in statements | | 419 | How do you define instance and non-instance properties | | 420 | What is the difference between isNaN and Number.isNaN? | | 421 | How to invoke an IIFE without any extra brackets? | | 422 | Is that possible to use expressions in switch cases? | | 423 | What is the easiest way to ignore promise errors? | | 424 | How do style the console output using CSS? | | 425 | What is nullish coalescing operator (??)? | | 426 | How do you group and nest console output? | | 427 | What is the difference between dense and sparse arrays? | | 428 | What are the different ways to create sparse arrays? | | 429 | What is the difference between setTimeout, setImmediate and process.nextTick? | | 430 | How do you reverse an array without modifying original array? | | 431 | How do you create custom HTML element? | | 432 | What is global execution context? | | 433 | What is function execution context? | | 434 | What is debouncing? | | 435 | What is throttling? | | 436 | What is optional chaining? | | 437 | What is an environment record? | | 438 | How to verify if a variable is an array? | | 439 | What is pass by value and pass by reference? | | 440 | What are the differences between primitives and non-primitives? | | 441 | What are hidden classes? | | 442 | What is inline caching? | | 443 | How do you create your own bind method using either call or apply method? | | 444 | What are the differences between pure and impure functions?
  | 445 | What is referential transparency? | | 446 | What are the possible side-effects in javascript? | | 447 | What are compose and pipe functions? | | 448 | What is module pattern? | | 449 | What is Functon Composition? | | 450 | How to use await outside of async function prior to ES2022? |

  What are the possible ways to create objects in JavaScript
  There are many ways to create objects in javascript as below

  Object constructor:

  The simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.

  var object = new Object();
  Object's create method:

  The create method of Object creates a new object by passing the prototype object as a parameter

  var object = Object.create(null);
  Object literal syntax:

  The object literal syntax (or object initializer), is a comma-separated set of name-value pairs wrapped in curly braces.

  var object = {
      name: "Nikita",
      age: 22
  };

  Object literal property values can be of any data type, including array, function, and nested object.
  Note: This is an easiest way to create an object

  Function constructor:

  Create any function and apply the new operator to create object instances,

  function Person(name) {
    this.name = name;
    this.age = 21;
  }
  var object = new Person("Sudheer");
  Function constructor with prototype:

  This is similar to function constructor but it uses prototype for their properties and methods,

  function Person() {}
  Person.prototype.name = "Sudheer";
  var object = new Person();
  This is equivalent to an instance created with an object create method with a function prototype and then call that function with an instance and parameters as arguments.

  function func() {};

  new func(x, y, z);
  (OR)

  // Create a new instance using function prototype.
  var newInstance = Object.create(func.prototype)

  // Call the function
  var result = func.call(newInstance, x, y, z),

  // If the result is a non-null object then use it otherwise just use the new instance.
  console.log(result && typeof result === 'object' ? result : newInstance);
  ES6 Class syntax:
  ES6 introduces class feature to create the objects

  class Person {
    constructor(name) {
      this.name = name;
    }
  }

  var object = new Person("Sudheer");
  Singleton pattern:

  A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don't accidentally create multiple instances.

  var object = new (function () {
    this.name = "Sudheer";
  })();
  ⬆ Back to Top

  What is a prototype chain
  Prototype chaining is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language.

  The prototype on object instance is available through Object.getPrototypeOf(object) or __proto__ property whereas prototype on constructors function is available through Object.prototype.

  Screenshot

  ⬆ Back to Top

  What is the difference between Call, Apply and Bind
  The difference between Call, Apply and Bind can be explained with below examples,

  Call: The call() method invokes a function with a given this value and arguments provided one by one

  var employee1 = { firstName: "John", lastName: "Rodson" };
  var employee2 = { firstName: "Jimmy", lastName: "Baily" };

  function invite(greeting1, greeting2) {
    console.log(
      greeting1 + " " + this.firstName + " " + this.lastName + ", " + greeting2
    );
  }


  invite.call(employee1, "Hello", "How are you?"); // Hello John Rodson, How are you?
  invite.call(employee2, "Hello", "How are you?"); // Hello Jimmy Baily, How are you?
  Apply: Invokes the function with a given this value and allows you to pass in arguments as an array

  var employee1 = { firstName: "John", lastName: "Rodson" };
  var employee2 = { firstName: "Jimmy", lastName: "Baily" };

  function invite(greeting1, greeting2) {
    console.log(
      greeting1 + " " + this.firstName + " " + this.lastName + ", " + greeting2
    );
  }

  invite.apply(employee1, ["Hello", "How are you?"]); // Hello John Rodson, How are you?
  invite.apply(employee2, ["Hello", "How are you?"]); // Hello Jimmy Baily, How are you?
  bind: returns a new function, allowing you to pass any number of arguments

  var employee1 = { firstName: "John", lastName: "Rodson" };
  var employee2 = { firstName: "Jimmy", lastName: "Baily" };

  function invite(greeting1, greeting2) {
    console.log(
      greeting1 + " " + this.firstName + " " + this.lastName + ", " + greeting2
    );
  }

  var inviteEmployee1 = invite.bind(employee1);
  var inviteEmployee2 = invite.bind(employee2);
  inviteEmployee1("Hello", "How are you?"); // Hello John Rodson, How are you?
  inviteEmployee2("Hello", "How are you?"); // Hello Jimmy Baily, How are you?
  Call and apply are pretty interchangeable. Both execute the current function immediately. You need to decide whether it’s easier to send in an array or a comma separated list of arguments. You can remember by treating Call is for comma (separated list) and Apply is for Array.

  Whereas Bind creates a new function that will have this set to the first parameter passed to bind().

  ⬆ Back to Top

  What is JSON and its common operations
  JSON is a text-based data format following JavaScript object syntax, which was popularized by Douglas Crockford. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/json

  Parsing: Converting a string to a native object

  JSON.parse(text);
  Stringification: converting a native object to a string so it can be transmitted across the network

  JSON.stringify(object);
  ⬆ Back to Top

  What is the purpose of the array slice method
  The slice() method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end.

  Some of the examples of this method are,

  let arrayIntegers = [1, 2, 3, 4, 5];
  let arrayIntegers1 = arrayIntegers.slice(0, 2); // returns [1,2]
  let arrayIntegers2 = arrayIntegers.slice(2, 3); // returns [3]
  let arrayIntegers3 = arrayIntegers.slice(4); //returns [5]
  Note: Slice method won't mutate the original array but it returns the subset as a new array.

  ⬆ Back to Top

  What is the purpose of the array splice method
  The splice() method is used either adds/removes items to/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the optional second argument indicates the number of elements to be deleted. Each additional argument is added to the array.

  Some of the examples of this method are,

  let arrayIntegersOriginal1 = [1, 2, 3, 4, 5];
  let arrayIntegersOriginal2 = [1, 2, 3, 4, 5];
  let arrayIntegersOriginal3 = [1, 2, 3, 4, 5];

  let arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); // returns [1, 2]; original array: [3, 4, 5]
  let arrayIntegers2 = arrayIntegersOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]
  let arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, "a", "b", "c"); //returns [4]; original array: [1, 2, 3, "a", "b", "c", 5]
  Note: Splice method modifies the original array and returns the deleted array.

  ⬆ Back to Top

  What is the difference between slice and splice
  Some of the major difference in a tabular form

  Slice	Splice
  Doesn't modify the original array(immutable)	Modifies the original array(mutable)
  Returns the subset of original array	Returns the deleted elements as array
  Used to pick the elements from array	Used to insert or delete elements to/from array
  ⬆ Back to Top

  How do you compare Object and Map
  Objects are similar to Maps in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases.

  The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive.
  The keys in Map are ordered while keys added to Object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.
  You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.
  A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.
  An Object has a prototype, so there are default keys in the map that could collide with your keys if you're not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done.
  A Map may perform better in scenarios involving frequent addition and removal of key pairs.
  ⬆ Back to Top

  What is the difference between == and === operators
  JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,

  Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.
  Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value. There are two special cases in this,
  NaN is not equal to anything, including NaN.
  Positive and negative zeros are equal to one another.
  Two Boolean operands are strictly equal if both are true or both are false.
  Two objects are strictly equal if they refer to the same Object.
  Null and Undefined types are not equal with ===, but equal with ==. i.e, null===undefined --> false but null==undefined --> true
  Some of the example which covers the above cases,

  0 == false   // true
  0 === false  // false
  1 == "1"     // true
  1 === "1"    // false
  null == undefined // true
  null === undefined // false
  '0' == false // true
  '0' === false // false
  []==[] or []===[] //false, refer different objects in memory
  {}=={} or {}==={} //false, refer different objects in memory
  ⬆ Back to Top

  What are lambda or arrow functions
  An arrow function is a shorter syntax for a function expression and does not have its own this, arguments, super, or new.target. These functions are best suited for non-method functions, and they cannot be used as constructors.

  ⬆ Back to Top

  What is a first class function
  In Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable.

  For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listener

  const handler = () => console.log("This is a click handler function");
  document.addEventListener("click", handler);
  ⬆ Back to Top

  What is a first order function
  First-order function is a function that doesn’t accept another function as an argument and doesn’t return a function as its return value.

  const firstOrder = () => console.log("I am a first order function!");
  ⬆ Back to Top

  What is a higher order function
  Higher-order function is a function that accepts another function as an argument or returns a function as a return value or both.

  const firstOrderFunc = () =>
    console.log("Hello, I am a First order function");
  const higherOrder = (ReturnFirstOrderFunc) => ReturnFirstOrderFunc();
  higherOrder(firstOrderFunc);
  ⬆ Back to Top

  What is a unary function
  Unary function (i.e. monadic) is a function that accepts exactly one argument. It stands for a single argument accepted by a function.

  Let us take an example of unary function,

  const unaryFunction = (a) => console.log(a + 10); // Add 10 to the given argument and display the value
  ⬆ Back to Top

  What is the currying function
  Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument. Currying is named after a mathematician Haskell Curry. By applying currying, a n-ary function turns it into a unary function.

  Let's take an example of n-ary function and how it turns into a currying function,

  const multiArgFunction = (a, b, c) => a + b + c;
  console.log(multiArgFunction(1, 2, 3)); // 6

  const curryUnaryFunction = (a) => (b) => (c) => a + b + c;
  curryUnaryFunction(1); // returns a function: b => c =>  1 + b + c
  curryUnaryFunction(1)(2); // returns a function: c => 3 + c
  curryUnaryFunction(1)(2)(3); // returns the number 6
  Curried functions are great to improve code reusability and functional composition.

  ⬆ Back to Top

  What is a pure function
  A Pure function is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places in the application then it will always return the same value.

  Let's take an example to see the difference between pure and impure functions,

  //Impure
  let numberArray = [];
  const impureAddNumber = (number) => numberArray.push(number);
  //Pure
  const pureAddNumber = (number) => (argNumberArray) =>
    argNumberArray.concat([number]);

  //Display the results
  console.log(impureAddNumber(6)); // returns 1
  console.log(numberArray); // returns [6]
  console.log(pureAddNumber(7)(numberArray)); // returns [6, 7]
  console.log(numberArray); // returns [6]
  As per the above code snippets, the Push function is impure itself by altering the array and returning a push number index independent of the parameter value. . Whereas Concat on the other hand takes the array and concatenates it with the other array producing a whole new array without side effects. Also, the return value is a concatenation of the previous array.

  Remember that Pure functions are important as they simplify unit testing without any side effects and no need for dependency injection. They also avoid tight coupling and make it harder to break your application by not having any side effects. These principles are coming together with Immutability concept of ES6 by giving preference to const over let usage.

  ⬆ Back to Top

  What is the purpose of the let keyword
  The let statement declares a block scope local variable. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the var keyword used to define a variable globally, or locally to an entire function regardless of block scope.

  Let's take an example to demonstrate the usage,

  let counter = 30;
  if (counter === 30) {
    let counter = 31;
    console.log(counter); // 31
  }
  console.log(counter); // 30 (because the variable in if block won't exist here)
  ⬆ Back to Top

  What is the difference between let and var
  You can list out the differences in a tabular format

  var	let
  It is been available from the beginning of JavaScript	Introduced as part of ES6
  It has function scope	It has block scope
  Variables will be hoisted	Hoisted but not initialized
  Let's take an example to see the difference,

  function userDetails(username) {
    if (username) {
      console.log(salary); // undefined due to hoisting
      console.log(age); // ReferenceError: Cannot access 'age' before initialization
      let age = 30;
      var salary = 10000;
    }
    console.log(salary); //10000 (accessible due to function scope)
    console.log(age); //error: age is not defined(due to block scope)
  }
  userDetails("John");
  ⬆ Back to Top

  What is the reason to choose the name let as a keyword
  let is a mathematical statement that was adopted by early programming languages like Scheme and Basic. It has been borrowed from dozens of other languages that use let already as a traditional keyword as close to var as possible.

  ⬆ Back to Top

  How do you redeclare variables in switch block without an error
  If you try to redeclare variables in a switch block then it will cause errors because there is only one block. For example, the below code block throws a syntax error as below,

  let counter = 1;
  switch (x) {
    case 0:
      let name;
      break;
    case 1:
      let name; // SyntaxError for redeclaration.
      break;
  }
  To avoid this error, you can create a nested block inside a case clause and create a new block scoped lexical environment.

  let counter = 1;
  switch (x) {
    case 0: {
      let name;
      break;
    }
    case 1: {
      let name; // No SyntaxError for redeclaration.
      break;
    }
  }
  ⬆ Back to Top

  What is the Temporal Dead Zone
  The Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const keywords, but not with var. In ECMAScript 6, accessing a let or const variable before its declaration (within its scope) causes a ReferenceError. The time span when that happens, between the creation of a variable’s binding and its declaration, is called the temporal dead zone.

  Let's see this behavior with an example,

  function somemethod() {
    console.log(counter1); // undefined
    console.log(counter2); // ReferenceError
    var counter1 = 1;
    let counter2 = 2;
  }
  ⬆ Back to Top

  What is IIFE(Immediately Invoked Function Expression)
  IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,

  (function () {
    // logic here
  })();
  The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,

  (function () {
    var message = "IIFE";
    console.log(message);
  })();
  console.log(message); //Error: message is not defined
  ⬆ Back to Top

  How do you decode or encode a URL in JavaScript?
  encodeURI() function is used to encode an URL. This function requires a URL string as a parameter and return that encoded string. decodeURI() function is used to decode an URL. This function requires an encoded URL string as parameter and return that decoded string.

  Note: If you want to encode characters such as / ? : @ & = + $ # then you need to use encodeURIComponent().

  let uri = "employeeDetails?name=john&occupation=manager";
  let encoded_uri = encodeURI(uri);
  let decoded_uri = decodeURI(encoded_uri);
  ⬆ Back to Top

  What is memoization
  Memoization is a programming technique which attempts to increase a function’s performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache. Let's take an example of adding function with memoization,

  const memoizAddition = () => {
    let cache = {};
    return (value) => {
      if (value in cache) {
        console.log("Fetching from cache");
        return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.
      } else {
        console.log("Calculating result");
        let result = value + 20;
        cache[value] = result;
        return result;
      }
    };
  };
  // returned function from memoizAddition
  const addition = memoizAddition();
  console.log(addition(20)); //output: 40 calculated
  console.log(addition(20)); //output: 40 cached
  ⬆ Back to Top

  What is Hoisting
  Hoisting is a JavaScript mechanism where variables, function declarations and classes are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation. Let's take a simple example of variable hoisting,

  console.log(message); //output : undefined
  var message = "The variable Has been hoisted";
  The above code looks like as below to the interpreter,

  var message;
  console.log(message);
  message = "The variable Has been hoisted";
  In the same fashion, function declarations are hoisted too

  message("Good morning"); //Good morning

  function message(name) {
    console.log(name);
  }
  This hoisting makes functions to be safely used in code before they are declared.

  ⬆ Back to Top

  What are classes in ES6
  In ES6, Javascript classes are primarily syntactic sugar over JavaScript’s existing prototype-based inheritance. For example, the prototype based inheritance written in function expression as below,

  function Bike(model, color) {
    this.model = model;
    this.color = color;
  }

  Bike.prototype.getDetails = function () {
    return this.model + " bike has" + this.color + " color";
  };
  Whereas ES6 classes can be defined as an alternative

  class Bike {
    constructor(color, model) {
      this.color = color;
      this.model = model;
    }

    getDetails() {
      return this.model + " bike has" + this.color + " color";
    }
  }
  ⬆ Back to Top

  What are closures
  A closure is the combination of a function and the lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function’s variables. The closure has three scope chains

  Own scope where variables defined between its curly brackets
  Outer function’s variables
  Global variables
  Let's take an example of closure concept,

  function Welcome(name) {
    var greetingInfo = function (message) {
      console.log(message + " " + name);
    };
    return greetingInfo;
  }
  var myFunction = Welcome("John");
  myFunction("Welcome "); //Output: Welcome John
  myFunction("Hello Mr."); //output: Hello Mr.John
  As per the above code, the inner function(i.e, greetingInfo) has access to the variables in the outer function scope(i.e, Welcome) even after the outer function has returned.

  ⬆ Back to Top

  What are modules
  Modules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design patterns. Most of the JavaScript modules export an object literal, a function, or a constructor

  ⬆ Back to Top

  Why do you need modules
  Below are the list of benefits using modules in javascript ecosystem

  Maintainability
  Reusability
  Namespacing
  ⬆ Back to Top

  What is scope in javascript
  Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.

  ⬆ Back to Top

  What is a service worker
  A Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and provides features that don't need a web page or user interaction. Some of the major features of service workers are Rich offline experiences(offline first web application development), periodic background syncs, push notifications, intercept and handle network requests and programmatically managing a cache of responses.

  ⬆ Back to Top

  How do you manipulate DOM using a service worker
  Service worker can't access the DOM directly. But it can communicate with the pages it controls by responding to messages sent via the postMessage interface, and those pages can manipulate the DOM.

  ⬆ Back to Top

  How do you reuse information across service worker restarts
  The problem with service worker is that it gets terminated when not in use, and restarted when it's next needed, so you cannot rely on global state within a service worker's onfetch and onmessage handlers. In this case, service workers will have access to IndexedDB API in order to persist and reuse across restarts.

  ⬆ Back to Top

  What is IndexedDB
  IndexedDB is a low-level API for client-side storage of larger amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data.

  ⬆ Back to Top

  What is web storage
  Web storage is an API that provides a mechanism by which browsers can store key/value pairs locally within the user's browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for storing data on the client.

  Local storage: It stores data for current origin with no expiration date.
  Session storage: It stores data for one session and the data is lost when the browser tab is closed.
  ⬆ Back to Top

  What is a post message
  Post message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a pop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages are allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same protocol, port number, and host).

  ⬆ Back to Top

  What is a Cookie
  A cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as key/value pairs. For example, you can create a cookie named username as below,

  document.cookie = "username=John";
  Screenshot

  ⬆ Back to Top

  Why do you need a Cookie
  Cookies are used to remember information about the user profile(such as username). It basically involves two steps,

  When a user visits a web page, the user profile can be stored in a cookie.
  Next time the user visits the page, the cookie remembers the user profile.
  ⬆ Back to Top

  What are the options in a cookie
  There are few below options available for a cookie,

  By default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry date (in UTC time).
  document.cookie = "username=John; expires=Sat, 8 Jun 2019 12:00:00 UTC";
  By default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to using a path parameter.
  document.cookie = "username=John; path=/services";
  ⬆ Back to Top

  How do you delete a cookie
  You can delete a cookie by setting the expiry date as a passed date. You don't need to specify a cookie value in this case. For example, you can delete a username cookie in the current page as below.

  document.cookie =
    "username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=/;";
  Note: You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn't allow to delete a cookie unless you specify a path parameter.

  ⬆ Back to Top

  What are the differences between cookie, local storage and session storage
  Below are some of the differences between cookie, local storage and session storage,

  Feature	Cookie	Local storage	Session storage
  Accessed on client or server side	Both server-side & client-side	client-side only	client-side only
  Lifetime	As configured using Expires option	until deleted	until tab is closed
  SSL support	Supported	Not supported	Not supported
  Maximum data size	4KB	5 MB	5MB
  ⬆ Back to Top

  What is the main difference between localStorage and sessionStorage
  LocalStorage is the same as SessionStorage but it persists the data even when the browser is closed and reopened(i.e it has no expiration time) whereas in sessionStorage data gets cleared when the page session ends.

  ⬆ Back to Top

  How do you access web storage
  The Window object implements the WindowLocalStorage and WindowSessionStorage objects which has localStorage(window.localStorage) and sessionStorage(window.sessionStorage) properties respectively. These properties create an instance of the Storage object, through which data items can be set, retrieved and removed for a specific domain and storage type (session or local). For example, you can read and write on local storage objects as below

  localStorage.setItem("logo", document.getElementById("logo").value);
  localStorage.getItem("logo");
  ⬆ Back to Top

  What are the methods available on session storage
  The session storage provided methods for reading, writing and clearing the session data

  // Save data to sessionStorage
  sessionStorage.setItem("key", "value");

  // Get saved data from sessionStorage
  let data = sessionStorage.getItem("key");

  // Remove saved data from sessionStorage
  sessionStorage.removeItem("key");

  // Remove all saved data from sessionStorage
  sessionStorage.clear();
  ⬆ Back to Top

  What is a storage event and its event handler
  The StorageEvent is an event that fires when a storage area has been changed in the context of another document. Whereas onstorage property is an EventHandler for processing storage events. The syntax would be as below

  window.onstorage = functionRef;
  Let's take the example usage of onstorage event handler which logs the storage key and it's values

  window.onstorage = function (e) {
    console.log(
      "The " +
        e.key +
        " key has been changed from " +
        e.oldValue +
        " to " +
        e.newValue +
        "."
    );
  };
  ⬆ Back to Top

  Why do you need web storage
  Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance. Also, the information is never transferred to the server. Hence this is a more recommended approach than Cookies.

  ⬆ Back to Top

  How do you check web storage browser support
  You need to check browser support for localStorage and sessionStorage before using web storage,

  if (typeof Storage !== "undefined") {
    // Code for localStorage/sessionStorage.
  } else {
    // Sorry! No Web Storage support..
  }
  ⬆ Back to Top

  How do you check web workers browser support
  You need to check browser support for web workers before using it

  if (typeof Worker !== "undefined") {
    // code for Web worker support.
  } else {
    // Sorry! No Web Worker support..
  }
  ⬆ Back to Top

  Give an example of a web worker
  You need to follow below steps to start using web workers for counting example

  Create a Web Worker File: You need to write a script to increment the count value. Let's name it as counter.js
  let i = 0;
  function timedCount() {
    i = i + 1;
    postMessage(i);
    setTimeout("timedCount()", 500);
  }

  timedCount();
  Here postMessage() method is used to post a message back to the HTML page

  Create a Web Worker Object: You can create a web worker object by checking for browser support. Let's name this file as web_worker_example.js
  if (typeof w == "undefined") {
    w = new Worker("counter.js");
  }
  and we can receive messages from web worker

  w.onmessage = function (event) {
    document.getElementById("message").innerHTML = event.data;
  };
  Terminate a Web Worker: Web workers will continue to listen for messages (even after the external script is finished) until it is terminated. You can use the terminate() method to terminate listening to the messages.
  w.terminate();
  Reuse the Web Worker: If you set the worker variable to undefined you can reuse the code
  w = undefined;
  ⬆ Back to Top

  What are the restrictions of web workers on DOM
  WebWorkers don't have access to below javascript objects since they are defined in an external files

  Window object
  Document object
  Parent object
  ⬆ Back to Top

  What is a promise
  A promise is an object that may produce a single value some time in the future with either a resolved value or a reason that it’s not resolved(for example, network error). It will be in one of the 3 possible states: fulfilled, rejected, or pending.

  The syntax of Promise creation looks like below,

  const promise = new Promise(function (resolve, reject) {
    // promise description
  });
  The usage of a promise would be as below,

  const promise = new Promise(
    (resolve) => {
      setTimeout(() => {
        resolve("I'm a Promise!");
      }, 5000);
    },
    (reject) => {}
  );

  promise.then((value) => console.log(value));
  The action flow of a promise will be as below,

  Screenshot

  ⬆ Back to Top

  Why do you need a promise
  Promises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing the callback hell and writing the cleaner code.

  ⬆ Back to Top

  What are the three states of promise
  Promises have three states:

  Pending: This is an initial state of the Promise before an operation begins
  Fulfilled: This state indicates that the specified operation was completed.
  Rejected: This state indicates that the operation did not complete. In this case an error value will be thrown.
  ⬆ Back to Top

  What is a callback function
  A callback function is a function passed into another function as an argument. This function is invoked inside the outer function to complete an action. Let's take a simple example of how to use callback function

  function callbackFunction(name) {
    console.log("Hello " + name);
  }

  function outerFunction(callback) {
    let name = prompt("Please enter your name.");
    callback(name);
  }

  outerFunction(callbackFunction);
  ⬆ Back to Top

  Why do we need callbacks
  The callbacks are needed because javascript is an event driven language. That means instead of waiting for a response javascript will keep executing while listening for other events. Let's take an example with the first function invoking an API call(simulated by setTimeout) and the next function which logs the message.

  function firstFunction() {
    // Simulate a code delay
    setTimeout(function () {
      console.log("First function called");
    }, 1000);
  }
  function secondFunction() {
    console.log("Second function called");
  }
  firstFunction();
  secondFunction();

  Output;
  // Second function called
  // First function called
  As observed from the output, javascript didn't wait for the response of the first function and the remaining code block got executed. So callbacks are used in a way to make sure that certain code doesn’t execute until the other code finishes execution.

  ⬆ Back to Top

  What is a callback hell
  Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic. The callback hell looks like below,

  async1(function(){
      async2(function(){
          async3(function(){
              async4(function(){
                  ....
              });
          });
      });
  });
  ⬆ Back to Top

  What are server-sent events
  Server-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server via HTTP connection without resorting to polling. These are a one way communications channel - events flow from server to client only. This has been used in Facebook/Twitter updates, stock price updates, news feeds etc.

  ⬆ Back to Top

  How do you receive server-sent event notifications
  The EventSource object is used to receive server-sent event notifications. For example, you can receive messages from server as below,

  if (typeof EventSource !== "undefined") {
    var source = new EventSource("sse_generator.js");
    source.onmessage = function (event) {
      document.getElementById("output").innerHTML += event.data + "<br>";
    };
  }
  ⬆ Back to Top

  How do you check browser support for server-sent events
  You can perform browser support for server-sent events before using it as below,

  if (typeof EventSource !== "undefined") {
    // Server-sent events supported. Let's have some code here!
  } else {
    // No server-sent events supported
  }
  ⬆ Back to Top

  What are the events available for server sent events
  Below are the list of events available for server sent events

  Event	Description
  onopen	It is used when a connection to the server is opened
  onmessage	This event is used when a message is received
  onerror	It happens when an error occurs
  ⬆ Back to Top

  What are the main rules of promise
  A promise must follow a specific set of rules:

  A promise is an object that supplies a standard-compliant .then() method
  A pending promise may transition into either fulfilled or rejected state
  A fulfilled or rejected promise is settled and it must not transition into any other state.
  Once a promise is settled, the value must not change.
  ⬆ Back to Top

  What is callback in callback
  You can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks.

  loadScript("/script1.js", function (script) {
    console.log("first script is loaded");

    loadScript("/script2.js", function (script) {
      console.log("second script is loaded");

      loadScript("/script3.js", function (script) {
        console.log("third script is loaded");
        // after all scripts are loaded
      });
    });
  });
  ⬆ Back to Top

  What is promise chaining
  The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let's take an example of promise chaining for calculating the final result,

  new Promise(function (resolve, reject) {
    setTimeout(() => resolve(1), 1000);
  })
    .then(function (result) {
      console.log(result); // 1
      return result * 2;
    })
    .then(function (result) {
      console.log(result); // 2
      return result * 3;
    })
    .then(function (result) {
      console.log(result); // 6
      return result * 4;
    });
  In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,

  The initial promise resolves in 1 second,
  After that .then handler is called by logging the result(1) and then return a promise with the value of result * 2.
  After that the value passed to the next .then handler by logging the result(2) and return a promise with result * 3.
  Finally the value passed to the last .then handler by logging the result(6) and return a promise with result * 4.
  ⬆ Back to Top

  What is promise.all
  Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,

  Promise.all([Promise1, Promise2, Promise3]) .then(result) => {   console.log(result) }) .catch(error => console.log(`Error in promises ${error}`))
  Note: Remember that the order of the promises(output the result) is maintained as per input order.

  ⬆ Back to Top

  What is the purpose of the race method in promise
  Promise.race() method will return the promise instance which is firstly resolved or rejected. Let's take an example of race() method where promise2 is resolved first

  var promise1 = new Promise(function (resolve, reject) {
    setTimeout(resolve, 500, "one");
  });
  var promise2 = new Promise(function (resolve, reject) {
    setTimeout(resolve, 100, "two");
  });

  Promise.race([promise1, promise2]).then(function (value) {
    console.log(value); // "two" // Both promises will resolve, but promise2 is faster
  });
  ⬆ Back to Top

  What is a strict mode in javascript
  Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict” operating context. This way it prevents certain actions from being taken and throws more exceptions. The literal expression "use strict"; instructs the browser to use the javascript code in the Strict mode.

  ⬆ Back to Top

  Why do you need strict mode
  Strict mode is useful to write "secure" JavaScript by notifying "bad syntax" into real errors. For example, it eliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object.

  ⬆ Back to Top

  How do you declare strict mode
  The strict mode is declared by adding "use strict"; to the beginning of a script or a function. If declared at the beginning of a script, it has global scope.

  "use strict";
  x = 3.14; // This will cause an error because x is not declared
  and if you declare inside a function, it has local scope

  x = 3.14; // This will not cause an error.
  myFunction();

  function myFunction() {
    "use strict";
    y = 3.14; // This will cause an error
  }
  ⬆ Back to Top

  What is the purpose of double exclamation
  The double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null, undefined, etc.), it will be false, otherwise, it will be true. For example, you can test IE version using this expression as below,

  let isIE8 = false;
  isIE8 = !!navigator.userAgent.match(/MSIE 8.0/);
  console.log(isIE8); // returns true or false
  If you don't use this expression then it returns the original value.

  console.log(navigator.userAgent.match(/MSIE 8.0/)); // returns either an Array or null
  Note: The expression !! is not an operator, but it is just twice of ! operator.

  ⬆ Back to Top

  What is the purpose of the delete operator
  The delete keyword is used to delete the property as well as its value.

  var user = { name: "John", age: 20 };
  delete user.age;

  console.log(user); // {name: "John"}
  ⬆ Back to Top

  What is typeof operator
  You can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a variable or an expression.

  typeof "John Abraham"; // Returns "string"
  typeof (1 + 2); // Returns "number"
  typeof [1, 2, 3] // Returns "object" because all arrays are also objects
  ⬆ Back to Top

  What is undefined property
  The undefined property indicates that a variable has not been assigned a value, or declared but not initialized at all. The type of undefined value is undefined too.

  var user; // Value is undefined, type is undefined
  console.log(typeof user); //undefined
  Any variable can be emptied by setting the value to undefined.

  user = undefined;
  ⬆ Back to Top

  What is null value
  The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values. The type of null value is object. You can empty the variable by setting the value to null.

  var user = null;
  console.log(typeof user); //object
  ⬆ Back to Top

  What is the difference between null and undefined
  Below are the main differences between null and undefined,

  Null	Undefined
  It is an assignment value which indicates that variable points to no object.	It is not an assignment value where a variable has been declared but has not yet been assigned a value.
  Type of null is object	Type of undefined is undefined
  The null value is a primitive value that represents the null, empty, or non-existent reference.	The undefined value is a primitive value used when a variable has not been assigned a value.
  Indicates the absence of a value for a variable	Indicates absence of variable itself
  Converted to zero (0) while performing primitive operations	Converted to NaN while performing primitive operations
  ⬆ Back to Top

  What is eval
  The eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression, variable, statement, or sequence of statements.

  console.log(eval("1 + 2")); //  3
  ⬆ Back to Top

  What is the difference between window and document
  Below are the main differences between window and document,

  Window	Document
  It is the root level element in any web page	It is the direct child of the window object. This is also known as Document Object Model(DOM)
  By default window object is available implicitly in the page	You can access it via window.document or document.
  It has methods like alert(), confirm() and properties like document, location	It provides methods like getElementById, getElementsByTagName, createElement etc
  ⬆ Back to Top

  How do you access history in javascript
  The window.history object contains the browser's history. You can load previous and next URLs in the history using back() and next() methods.

  function goBack() {
    window.history.back();
  }
  function goForward() {
    window.history.forward();
  }
  Note: You can also access history without window prefix.

  ⬆ Back to Top

  How do you detect caps lock key turned on or not
  The mouseEvent getModifierState() is used to return a boolean value that indicates whether the specified modifier key is activated or not. The modifiers such as CapsLock, ScrollLock and NumLock are activated when they are clicked, and deactivated when they are clicked again.

  Let's take an input element to detect the CapsLock on/off behavior with an example,

  <input type="password" onmousedown="enterInput(event)" />

  <p id="feedback"></p>

  <script>
    function enterInput(e) {
      var flag = e.getModifierState("CapsLock");
      if (flag) {
        document.getElementById("feedback").innerHTML = "CapsLock activated";
      } else {
        document.getElementById("feedback").innerHTML =
          "CapsLock not activated";
      }
    }
  </script>
  ⬆ Back to Top

  What is isNaN
  The isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This function returns true if the value equates to NaN. Otherwise it returns false.

  isNaN("Hello"); //true
  isNaN("100"); //false
  ⬆ Back to Top

  What are the differences between undeclared and undefined variables
  Below are the major differences between undeclared(not defined) and undefined variables,

  undeclared	undefined
  These variables do not exist in a program and are not declared	These variables declared in the program but have not assigned any value
  If you try to read the value of an undeclared variable, then a runtime error is encountered	If you try to read the value of an undefined variable, an undefined value is returned.
  ⬆ Back to Top